// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.SalesApi.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250201060639_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc280d83-cc0a-4930-9f7e-8f50a461dded"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9969),
                            Email = "ameckiff1@icio.us",
                            Name = "Archie Meckiff",
                            Phone = "1251145281",
                            SocialNumber = "117-25-1588"
                        },
                        new
                        {
                            Id = new Guid("6fdc64ab-aa6e-4c9f-ae42-2b11905bdab1"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9973),
                            Email = "bpetracek2@dagondesign.com",
                            Name = "Bethina Petracek",
                            Phone = "2784864410",
                            SocialNumber = "807-31-1052"
                        },
                        new
                        {
                            Id = new Guid("e2f5f0d4-1cd6-4992-906f-edb85fa9d58f"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9976),
                            Email = "esimmons3@webeden.co.uk",
                            Name = "Eloise Simmons",
                            Phone = "5673473269",
                            SocialNumber = "687-16-2264"
                        },
                        new
                        {
                            Id = new Guid("f069db82-8aba-4ebb-bc46-634229dc5dd4"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9979),
                            Email = "ppillman4@parallels.com",
                            Name = "Phyllys Pillman",
                            Phone = "4453959379",
                            SocialNumber = "512-17-6944"
                        },
                        new
                        {
                            Id = new Guid("8eb3cd08-68d7-45b5-8fb8-822ccfeb8544"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9982),
                            Email = "hodeoran5@about.com",
                            Name = "Hildagarde O'Deoran",
                            Phone = "4707864856",
                            SocialNumber = "457-86-4530"
                        },
                        new
                        {
                            Id = new Guid("c9c2c9ec-1568-4ee7-986a-e127108ae4c4"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9985),
                            Email = "baulsford6@goo.gl",
                            Name = "Binnie Aulsford",
                            Phone = "9814345966",
                            SocialNumber = "552-29-4372"
                        },
                        new
                        {
                            Id = new Guid("d6b42cb4-f752-4697-899e-9a99f3311493"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9987),
                            Email = "lcranney7@walmart.com",
                            Name = "Leonid Cranney",
                            Phone = "7247173033",
                            SocialNumber = "523-53-3047"
                        },
                        new
                        {
                            Id = new Guid("2048e240-dfc8-48a6-b980-4f3c5b86206a"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9994),
                            Email = "rmcclary8@nbcnews.com",
                            Name = "Robinett McClary",
                            Phone = "6461435318",
                            SocialNumber = "884-29-8560"
                        },
                        new
                        {
                            Id = new Guid("6053ffd7-1b6a-4cc2-bcef-95237d577702"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9997),
                            Email = "blujan9@exblog.jp",
                            Name = "Barbra Lujan",
                            Phone = "3958797276",
                            SocialNumber = "314-65-1589"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf3ebffc-98ec-4a87-9d1c-012a78c61ea7"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9623),
                            Description = "Guaraná Antarctica Zero 350ml Lata",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica Zero",
                            Price = 3.3900000000000001,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("7a5e0ea7-431b-416c-b5c3-b4777201337f"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9629),
                            Description = "Pepsi Black 350ml Lata",
                            Image = "image.jpg",
                            Name = "Pepsi Black 350ml",
                            Price = 2.6899999999999999,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("ad735563-1f77-4b2f-bb29-c0eeca159d64"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9632),
                            Description = "Guaraná Antarctica Zero 2L",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica Zero",
                            Price = 9.4900000000000002,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("9f23d251-7e56-477a-9abc-1b936469d529"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9635),
                            Description = "Guaraná Antarctica 2L",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica",
                            Price = 9.4900000000000002,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("079eefe5-3d75-4c57-b502-b378ec1f9056"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9639),
                            Description = "Guaraná Antarctica 350ml Lata",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica 350ml",
                            Price = 3.3900000000000001,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("173aa8a2-e96c-40bd-96bc-31e70302f4ab"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9656),
                            Description = "Sukita 2L",
                            Image = "image.jpg",
                            Name = "Sukita 2L",
                            Price = 6.29,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("3f4cf060-8e84-4be7-b1c8-9fdb1c5d9ca1"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9659),
                            Description = "Soda Antarctica 350ml",
                            Image = "image.jpg",
                            Name = "Soda Antarctica 350ml",
                            Price = 2.9900000000000002,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("945b98d5-a5b2-4079-8d28-52043908bd2a"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9662),
                            Description = "Pepsi Twist 350ml",
                            Image = "image.jpg",
                            Name = "Pepsi Twist 350ml",
                            Price = 2.9900000000000002,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("8d569be4-b1c0-454b-8b6f-7ef38fe4e42e"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9665),
                            Description = "Soda Antarctica Zero 2L",
                            Image = "image.jpg",
                            Name = "Soda Antarctica Zero 2L",
                            Price = 8.1899999999999995,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("650bbb5a-0171-4545-aef6-a59afff8a01a"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9669),
                            Description = "Tônica Antarctica 350ml",
                            Image = "image.jpg",
                            Name = "Tônica Antarctica 350ml",
                            Price = 3.5899999999999999,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("86ab33a0-2c86-4129-841c-f7c80a76a2ac"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9672),
                            Description = "Tônica Antarctica 350ml",
                            Image = "image.jpg",
                            Name = "Tônica Antarctica 350ml",
                            Price = 3.5899999999999999,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("981f841b-c163-4c95-aada-e42a531cbcb8"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9675),
                            Description = "Tônica Antarctica Gengibre 269ml",
                            Image = "image.jpg",
                            Name = "Tônica Antarctica Gengibre 269ml",
                            Price = 2.6899999999999999,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("75f2d66b-c1ec-4164-b103-e4ced535553d"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9679),
                            Description = "Sukita Uva 350ml",
                            Image = "image.jpg",
                            Name = "Sukita Uva 350ml",
                            Price = 2.9900000000000002,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("bec171bd-095c-41b6-954c-a63b8646014f"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 654, DateTimeKind.Utc).AddTicks(9685),
                            Description = "Sukita 1L",
                            Image = "image.jpg",
                            Name = "Sukita 1L",
                            Price = 4.8899999999999997,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateSaleMade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int>("SaleNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SalesBrancheId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalSaleAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("SalesBrancheId")
                        .IsUnique();

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("SaleItems", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SalesBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("SalesBranches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d6bc996-0e1e-4453-bb20-b64dea657014"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(42),
                            Name = "Camaçari",
                            State = "BA"
                        },
                        new
                        {
                            Id = new Guid("82aebc50-2317-4607-847a-ca4541501241"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(46),
                            Name = "Caruaru",
                            State = "PE"
                        },
                        new
                        {
                            Id = new Guid("d10109e8-46c5-4442-8117-68f49642afc5"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(49),
                            Name = "Contagem",
                            State = "MG"
                        },
                        new
                        {
                            Id = new Guid("da300b36-ad3c-490f-a005-76ac5579c2ec"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(51),
                            Name = "Curitiba",
                            State = "PR"
                        },
                        new
                        {
                            Id = new Guid("33b30ae1-b803-4549-b49e-fa46614e1d08"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(54),
                            Name = "Guarulhos",
                            State = "SP"
                        },
                        new
                        {
                            Id = new Guid("df9968fc-9e45-4605-a830-ef1ffdc8d298"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(56),
                            Name = "Itajáí",
                            State = "SC"
                        },
                        new
                        {
                            Id = new Guid("65bb57c1-69c8-43e1-bc84-73bffbb0cf99"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(62),
                            Name = "Itapissuma",
                            State = "PE"
                        },
                        new
                        {
                            Id = new Guid("40ae8903-0729-4a20-bb02-ac085b2e28f4"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(64),
                            Name = "Jacareí",
                            State = "SP"
                        },
                        new
                        {
                            Id = new Guid("21705693-69c8-4ca9-b9dc-e567665dcc2e"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(66),
                            Name = "Jaguariúna",
                            State = "SP"
                        },
                        new
                        {
                            Id = new Guid("b978cc4f-3094-482e-8d00-33d93a7be7c8"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 6, 6, 38, 655, DateTimeKind.Utc).AddTicks(69),
                            Name = "Jundiaí",
                            State = "SP"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Customer", "Customer")
                        .WithOne("Sale")
                        .HasForeignKey("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.SalesBranch", "SalesBranche")
                        .WithOne("Sale")
                        .HasForeignKey("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "SalesBrancheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesBranche");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithOne("SaleItem")
                        .HasForeignKey("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", "SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Navigation("SaleItem")
                        .IsRequired();
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SalesBranch", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
