// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.SalesApi.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f48eeee-4d8b-4312-acf4-56f1243e3c44"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4138),
                            Email = "ameckiff1@icio.us",
                            Name = "Archie Meckiff",
                            Phone = "1251145281",
                            SocialNumber = "117-25-1588"
                        },
                        new
                        {
                            Id = new Guid("51569342-73cf-4f59-9d8d-c62b5c3c69c7"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4141),
                            Email = "bpetracek2@dagondesign.com",
                            Name = "Bethina Petracek",
                            Phone = "2784864410",
                            SocialNumber = "807-31-1052"
                        },
                        new
                        {
                            Id = new Guid("a4cdda75-0ecf-47bd-90c0-fa590b496dcc"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4144),
                            Email = "esimmons3@webeden.co.uk",
                            Name = "Eloise Simmons",
                            Phone = "5673473269",
                            SocialNumber = "687-16-2264"
                        },
                        new
                        {
                            Id = new Guid("e0275f14-afb5-4401-8194-67a7b19e020e"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4147),
                            Email = "ppillman4@parallels.com",
                            Name = "Phyllys Pillman",
                            Phone = "4453959379",
                            SocialNumber = "512-17-6944"
                        },
                        new
                        {
                            Id = new Guid("d3e0999e-b488-471d-ab77-6f5844ccf500"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4152),
                            Email = "hodeoran5@about.com",
                            Name = "Hildagarde O'Deoran",
                            Phone = "4707864856",
                            SocialNumber = "457-86-4530"
                        },
                        new
                        {
                            Id = new Guid("77a7541c-7382-49c9-9ab6-371c01c26746"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4155),
                            Email = "baulsford6@goo.gl",
                            Name = "Binnie Aulsford",
                            Phone = "9814345966",
                            SocialNumber = "552-29-4372"
                        },
                        new
                        {
                            Id = new Guid("78347967-d1cb-47ec-a994-588205f39c23"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4157),
                            Email = "lcranney7@walmart.com",
                            Name = "Leonid Cranney",
                            Phone = "7247173033",
                            SocialNumber = "523-53-3047"
                        },
                        new
                        {
                            Id = new Guid("5ad186b5-3af2-4a11-89d4-9d13458265b0"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4160),
                            Email = "rmcclary8@nbcnews.com",
                            Name = "Robinett McClary",
                            Phone = "6461435318",
                            SocialNumber = "884-29-8560"
                        },
                        new
                        {
                            Id = new Guid("b67494b8-7e5a-42b2-b6fc-836e9bb11827"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4162),
                            Email = "blujan9@exblog.jp",
                            Name = "Barbra Lujan",
                            Phone = "3958797276",
                            SocialNumber = "314-65-1589"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("593543e8-9f03-4123-973e-1cff38dd9ed6"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4026),
                            Description = "Guaraná Antarctica Zero 350ml Lata",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica Zero",
                            Price = 3.3900000000000001,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("06d7a669-6bb8-48b6-9abb-f32fb9c54722"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4030),
                            Description = "Pepsi Black 350ml Lata",
                            Image = "image.jpg",
                            Name = "Pepsi Black 350ml",
                            Price = 2.6899999999999999,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("8cd5b2e4-09e8-4b86-ac8e-6535c194f947"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4052),
                            Description = "Guaraná Antarctica Zero 2L",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica Zero",
                            Price = 9.4900000000000002,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("0a551424-303d-4583-bf3b-6f933315184d"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4055),
                            Description = "Guaraná Antarctica 2L",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica",
                            Price = 9.4900000000000002,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("ef54ad49-fc73-4d98-b43c-76627aaf367f"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4057),
                            Description = "Guaraná Antarctica 350ml Lata",
                            Image = "image.jpg",
                            Name = "Guaraná Antarctica 350ml",
                            Price = 3.3900000000000001,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("de171cb3-d814-467c-9fd0-c3ad5a266e40"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4060),
                            Description = "Sukita 2L",
                            Image = "image.jpg",
                            Name = "Sukita 2L",
                            Price = 6.29,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("1b8ca000-fedd-40ba-82c3-64b84026c7a9"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4063),
                            Description = "Soda Antarctica 350ml",
                            Image = "image.jpg",
                            Name = "Soda Antarctica 350ml",
                            Price = 2.9900000000000002,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("30b4765b-b54d-4f54-8390-e68352f2d469"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4065),
                            Description = "Pepsi Twist 350ml",
                            Image = "image.jpg",
                            Name = "Pepsi Twist 350ml",
                            Price = 2.9900000000000002,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("d9f83b1b-0305-4088-bafb-2c09fca64727"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4068),
                            Description = "Soda Antarctica Zero 2L",
                            Image = "image.jpg",
                            Name = "Soda Antarctica Zero 2L",
                            Price = 8.1899999999999995,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("4bce8fc8-b34b-4ac1-bffa-3c6411d14520"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4070),
                            Description = "Tônica Antarctica 350ml",
                            Image = "image.jpg",
                            Name = "Tônica Antarctica 350ml",
                            Price = 3.5899999999999999,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("6779577d-73f8-417a-b253-bda918f22c82"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4076),
                            Description = "Tônica Antarctica 350ml",
                            Image = "image.jpg",
                            Name = "Tônica Antarctica 350ml",
                            Price = 3.5899999999999999,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("eb6dbc13-4ef8-4125-941a-8bea30945bcc"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4079),
                            Description = "Tônica Antarctica Gengibre 269ml",
                            Image = "image.jpg",
                            Name = "Tônica Antarctica Gengibre 269ml",
                            Price = 2.6899999999999999,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("d17d70e1-04e7-4f7a-8200-a36896df9831"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4081),
                            Description = "Sukita Uva 350ml",
                            Image = "image.jpg",
                            Name = "Sukita Uva 350ml",
                            Price = 2.9900000000000002,
                            Status = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("bee9eadb-49a8-48dc-a8f6-6b830ed67ecb"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4085),
                            Description = "Sukita 1L",
                            Image = "image.jpg",
                            Name = "Sukita 1L",
                            Price = 4.8899999999999997,
                            Status = 1,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateSaleMade")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int>("SaleNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SalesBrancheId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalSaleAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("SalesBrancheId")
                        .IsUnique();

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("SaleItems", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SalesBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("SalesBranches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("638c20ab-51d1-4d7f-a8bc-08a4cd866296"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4201),
                            Name = "Camaçari",
                            State = "BA"
                        },
                        new
                        {
                            Id = new Guid("e9ede15a-9fee-45b2-b93e-0451a4a1f31e"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4205),
                            Name = "Caruaru",
                            State = "PE"
                        },
                        new
                        {
                            Id = new Guid("2b253be0-e8c9-4da8-af6a-b5b3ed1506ae"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4207),
                            Name = "Contagem",
                            State = "MG"
                        },
                        new
                        {
                            Id = new Guid("81a5c076-10a3-495f-92f4-ef672d3b0a48"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4212),
                            Name = "Curitiba",
                            State = "PR"
                        },
                        new
                        {
                            Id = new Guid("b0857121-06c2-4ccf-9904-2a228d8283e0"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4214),
                            Name = "Guarulhos",
                            State = "SP"
                        },
                        new
                        {
                            Id = new Guid("4d159590-04a7-4513-8afd-8cddfaed25cc"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4217),
                            Name = "Itajáí",
                            State = "SC"
                        },
                        new
                        {
                            Id = new Guid("0e8802bd-d427-4c5c-9ccd-af0b40594eb7"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4219),
                            Name = "Itapissuma",
                            State = "PE"
                        },
                        new
                        {
                            Id = new Guid("884eea63-1c31-42d7-b35d-31941a94eeec"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4273),
                            Name = "Jacareí",
                            State = "SP"
                        },
                        new
                        {
                            Id = new Guid("eff40c31-3f16-446f-aadd-d152dc2c24b9"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4276),
                            Name = "Jaguariúna",
                            State = "SP"
                        },
                        new
                        {
                            Id = new Guid("a5f3b56d-3ca1-487c-baf3-f48885f46527"),
                            Active = true,
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(4278),
                            Name = "Jundiaí",
                            State = "SP"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("89823805-b8ed-4d08-b457-625513edf33e"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(3752),
                            Email = "jeferson.almeida@ambev.com",
                            Password = "Teste@123",
                            Phone = "11997541210",
                            Role = "Admin",
                            Status = "Active",
                            Username = "jeferson.almeida"
                        },
                        new
                        {
                            Id = new Guid("40d639e8-6493-44d1-b6a0-223e718798da"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(3756),
                            Email = "cdepinna0@ucsd.edu",
                            Password = "ypgeD344.s",
                            Phone = "9023970118",
                            Role = "Admin",
                            Status = "Active",
                            Username = "nsloane0"
                        },
                        new
                        {
                            Id = new Guid("254a0880-51b5-42d3-949f-878575a0aa7f"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(3760),
                            Email = "kdurn1@51.la",
                            Password = "guetH908~",
                            Phone = "2129615239",
                            Role = "Manager",
                            Status = "Active",
                            Username = "harkin1"
                        },
                        new
                        {
                            Id = new Guid("62087d5d-55d7-43f5-9e64-228e188d6f7a"),
                            CreatedAt = new DateTime(2025, 2, 1, 20, 46, 5, 848, DateTimeKind.Utc).AddTicks(3763),
                            Email = "freicharz2@irs.gov",
                            Password = "vxpeC202\"+",
                            Phone = "6155049411",
                            Role = "Customer",
                            Status = "Active",
                            Username = "bquare2"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Customer", "Customer")
                        .WithOne("Sale")
                        .HasForeignKey("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.SalesBranch", "SalesBranche")
                        .WithOne("Sale")
                        .HasForeignKey("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "SalesBrancheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesBranche");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithOne("SaleItem")
                        .HasForeignKey("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", "SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Navigation("SaleItem")
                        .IsRequired();
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SalesBranch", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
